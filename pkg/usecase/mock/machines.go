// Code generated by MockGen. DO NOT EDIT.
// Source: machines.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/pddg/tiny-cluster/pkg/models"
	usecase "github.com/pddg/tiny-cluster/pkg/usecase"
	reflect "reflect"
)

// MockMachineUsecase is a mock of MachineUsecase interface
type MockMachineUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMachineUsecaseMockRecorder
}

// MockMachineUsecaseMockRecorder is the mock recorder for MockMachineUsecase
type MockMachineUsecaseMockRecorder struct {
	mock *MockMachineUsecase
}

// NewMockMachineUsecase creates a new mock instance
func NewMockMachineUsecase(ctrl *gomock.Controller) *MockMachineUsecase {
	mock := &MockMachineUsecase{ctrl: ctrl}
	mock.recorder = &MockMachineUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMachineUsecase) EXPECT() *MockMachineUsecaseMockRecorder {
	return m.recorder
}

// GetAllMachines mocks base method
func (m *MockMachineUsecase) GetAllMachines(ctx context.Context) ([]*models.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMachines", ctx)
	ret0, _ := ret[0].([]*models.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMachines indicates an expected call of GetAllMachines
func (mr *MockMachineUsecaseMockRecorder) GetAllMachines(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMachines", reflect.TypeOf((*MockMachineUsecase)(nil).GetAllMachines), ctx)
}

// GetMachineByName mocks base method
func (m *MockMachineUsecase) GetMachineByName(ctx context.Context, name string) (*models.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineByName", ctx, name)
	ret0, _ := ret[0].(*models.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineByName indicates an expected call of GetMachineByName
func (mr *MockMachineUsecaseMockRecorder) GetMachineByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineByName", reflect.TypeOf((*MockMachineUsecase)(nil).GetMachineByName), ctx, name)
}

// GetMachineByQuery mocks base method
func (m *MockMachineUsecase) GetMachineByQuery(ctx context.Context, query *usecase.MachineQuery) ([]*models.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineByQuery", ctx, query)
	ret0, _ := ret[0].([]*models.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineByQuery indicates an expected call of GetMachineByQuery
func (mr *MockMachineUsecaseMockRecorder) GetMachineByQuery(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineByQuery", reflect.TypeOf((*MockMachineUsecase)(nil).GetMachineByQuery), ctx, query)
}

// RegisterOrUpdateMachine mocks base method
func (m *MockMachineUsecase) RegisterOrUpdateMachine(ctx context.Context, machine *models.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterOrUpdateMachine", ctx, machine)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterOrUpdateMachine indicates an expected call of RegisterOrUpdateMachine
func (mr *MockMachineUsecaseMockRecorder) RegisterOrUpdateMachine(ctx, machine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOrUpdateMachine", reflect.TypeOf((*MockMachineUsecase)(nil).RegisterOrUpdateMachine), ctx, machine)
}

// DeleteMachine mocks base method
func (m *MockMachineUsecase) DeleteMachine(ctx context.Context, machine *models.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachine", ctx, machine)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMachine indicates an expected call of DeleteMachine
func (mr *MockMachineUsecaseMockRecorder) DeleteMachine(ctx, machine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachine", reflect.TypeOf((*MockMachineUsecase)(nil).DeleteMachine), ctx, machine)
}
