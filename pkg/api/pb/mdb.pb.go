// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: mdb.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MachineSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memory int64 `protobuf:"varint,1,opt,name=memory,proto3" json:"memory,omitempty"`
	Disk   int64 `protobuf:"varint,2,opt,name=disk,proto3" json:"disk,omitempty"`
	Core   int32 `protobuf:"varint,3,opt,name=core,proto3" json:"core,omitempty"`
}

func (x *MachineSpec) Reset() {
	*x = MachineSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdb_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MachineSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MachineSpec) ProtoMessage() {}

func (x *MachineSpec) ProtoReflect() protoreflect.Message {
	mi := &file_mdb_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MachineSpec.ProtoReflect.Descriptor instead.
func (*MachineSpec) Descriptor() ([]byte, []int) {
	return file_mdb_proto_rawDescGZIP(), []int{0}
}

func (x *MachineSpec) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *MachineSpec) GetDisk() int64 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *MachineSpec) GetCore() int32 {
	if x != nil {
		return x.Core
	}
	return 0
}

type Machine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac          string       `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Name         string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ipv4Addr     string       `protobuf:"bytes,3,opt,name=ipv4addr,proto3" json:"ipv4addr,omitempty"`
	DeployedDate int64        `protobuf:"varint,4,opt,name=deployed_date,json=deployedDate,proto3" json:"deployed_date,omitempty"`
	Spec         *MachineSpec `protobuf:"bytes,5,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *Machine) Reset() {
	*x = Machine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdb_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Machine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Machine) ProtoMessage() {}

func (x *Machine) ProtoReflect() protoreflect.Message {
	mi := &file_mdb_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Machine.ProtoReflect.Descriptor instead.
func (*Machine) Descriptor() ([]byte, []int) {
	return file_mdb_proto_rawDescGZIP(), []int{1}
}

func (x *Machine) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *Machine) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Machine) GetIpv4Addr() string {
	if x != nil {
		return x.Ipv4Addr
	}
	return ""
}

func (x *Machine) GetDeployedDate() int64 {
	if x != nil {
		return x.DeployedDate
	}
	return 0
}

func (x *Machine) GetSpec() *MachineSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type GetMachinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queries []*GetMachinesRequest_QueryItem `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *GetMachinesRequest) Reset() {
	*x = GetMachinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdb_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachinesRequest) ProtoMessage() {}

func (x *GetMachinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mdb_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachinesRequest.ProtoReflect.Descriptor instead.
func (*GetMachinesRequest) Descriptor() ([]byte, []int) {
	return file_mdb_proto_rawDescGZIP(), []int{2}
}

func (x *GetMachinesRequest) GetQueries() []*GetMachinesRequest_QueryItem {
	if x != nil {
		return x.Queries
	}
	return nil
}

type GetMachinesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Machines []*Machine `protobuf:"bytes,1,rep,name=machines,proto3" json:"machines,omitempty"`
}

func (x *GetMachinesResponse) Reset() {
	*x = GetMachinesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdb_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachinesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachinesResponse) ProtoMessage() {}

func (x *GetMachinesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mdb_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachinesResponse.ProtoReflect.Descriptor instead.
func (*GetMachinesResponse) Descriptor() ([]byte, []int) {
	return file_mdb_proto_rawDescGZIP(), []int{3}
}

func (x *GetMachinesResponse) GetMachines() []*Machine {
	if x != nil {
		return x.Machines
	}
	return nil
}

type RegisterOrUpdateMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Machine *Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
}

func (x *RegisterOrUpdateMachineRequest) Reset() {
	*x = RegisterOrUpdateMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdb_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterOrUpdateMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterOrUpdateMachineRequest) ProtoMessage() {}

func (x *RegisterOrUpdateMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mdb_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterOrUpdateMachineRequest.ProtoReflect.Descriptor instead.
func (*RegisterOrUpdateMachineRequest) Descriptor() ([]byte, []int) {
	return file_mdb_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterOrUpdateMachineRequest) GetMachine() *Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

type RegisterOrUpdateMachineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RegisterOrUpdateMachineResponse) Reset() {
	*x = RegisterOrUpdateMachineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdb_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterOrUpdateMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterOrUpdateMachineResponse) ProtoMessage() {}

func (x *RegisterOrUpdateMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mdb_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterOrUpdateMachineResponse.ProtoReflect.Descriptor instead.
func (*RegisterOrUpdateMachineResponse) Descriptor() ([]byte, []int) {
	return file_mdb_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterOrUpdateMachineResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterOrUpdateMachineResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteMachineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Machine *Machine `protobuf:"bytes,1,opt,name=machine,proto3" json:"machine,omitempty"`
	Force   bool     `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteMachineRequest) Reset() {
	*x = DeleteMachineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdb_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMachineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMachineRequest) ProtoMessage() {}

func (x *DeleteMachineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mdb_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMachineRequest.ProtoReflect.Descriptor instead.
func (*DeleteMachineRequest) Descriptor() ([]byte, []int) {
	return file_mdb_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteMachineRequest) GetMachine() *Machine {
	if x != nil {
		return x.Machine
	}
	return nil
}

func (x *DeleteMachineRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DeleteMachineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteMachineResponse) Reset() {
	*x = DeleteMachineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdb_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMachineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMachineResponse) ProtoMessage() {}

func (x *DeleteMachineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mdb_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMachineResponse.ProtoReflect.Descriptor instead.
func (*DeleteMachineResponse) Descriptor() ([]byte, []int) {
	return file_mdb_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteMachineResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteMachineResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetMachinesRequest_QueryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetMachinesRequest_QueryItem) Reset() {
	*x = GetMachinesRequest_QueryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mdb_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMachinesRequest_QueryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMachinesRequest_QueryItem) ProtoMessage() {}

func (x *GetMachinesRequest_QueryItem) ProtoReflect() protoreflect.Message {
	mi := &file_mdb_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMachinesRequest_QueryItem.ProtoReflect.Descriptor instead.
func (*GetMachinesRequest_QueryItem) Descriptor() ([]byte, []int) {
	return file_mdb_proto_rawDescGZIP(), []int{2, 0}
}

func (x *GetMachinesRequest_QueryItem) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetMachinesRequest_QueryItem) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_mdb_proto protoreflect.FileDescriptor

var file_mdb_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x69, 0x6e,
	0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x64, 0x62, 0x22, 0x4d, 0x0a,
	0x0b, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xa3, 0x01, 0x0a,
	0x07, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x70, 0x76, 0x34, 0x61, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x61, 0x64, 0x64, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x74, 0x69, 0x6e, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x22, 0x93, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x07, 0x71, 0x75, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x69, 0x6e,
	0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x1a, 0x33, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x08, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x22, 0x55, 0x0a, 0x1e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x69, 0x6e, 0x79,
	0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x55, 0x0a,
	0x1f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x69, 0x6e, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x32, 0xcf, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x5f, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x74, 0x69, 0x6e, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x12,
	0x30, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d,
	0x64, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x26, 0x2e, 0x74, 0x69, 0x6e, 0x79, 0x5f, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x69, 0x6e, 0x79, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x6d, 0x64, 0x62,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x64, 0x64, 0x67, 0x2f, 0x74, 0x69, 0x6e, 0x79, 0x2d, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mdb_proto_rawDescOnce sync.Once
	file_mdb_proto_rawDescData = file_mdb_proto_rawDesc
)

func file_mdb_proto_rawDescGZIP() []byte {
	file_mdb_proto_rawDescOnce.Do(func() {
		file_mdb_proto_rawDescData = protoimpl.X.CompressGZIP(file_mdb_proto_rawDescData)
	})
	return file_mdb_proto_rawDescData
}

var file_mdb_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mdb_proto_goTypes = []interface{}{
	(*MachineSpec)(nil),                     // 0: tiny_cluster.mdb.MachineSpec
	(*Machine)(nil),                         // 1: tiny_cluster.mdb.Machine
	(*GetMachinesRequest)(nil),              // 2: tiny_cluster.mdb.GetMachinesRequest
	(*GetMachinesResponse)(nil),             // 3: tiny_cluster.mdb.GetMachinesResponse
	(*RegisterOrUpdateMachineRequest)(nil),  // 4: tiny_cluster.mdb.RegisterOrUpdateMachineRequest
	(*RegisterOrUpdateMachineResponse)(nil), // 5: tiny_cluster.mdb.RegisterOrUpdateMachineResponse
	(*DeleteMachineRequest)(nil),            // 6: tiny_cluster.mdb.DeleteMachineRequest
	(*DeleteMachineResponse)(nil),           // 7: tiny_cluster.mdb.DeleteMachineResponse
	(*GetMachinesRequest_QueryItem)(nil),    // 8: tiny_cluster.mdb.GetMachinesRequest.QueryItem
}
var file_mdb_proto_depIdxs = []int32{
	0, // 0: tiny_cluster.mdb.Machine.spec:type_name -> tiny_cluster.mdb.MachineSpec
	8, // 1: tiny_cluster.mdb.GetMachinesRequest.queries:type_name -> tiny_cluster.mdb.GetMachinesRequest.QueryItem
	1, // 2: tiny_cluster.mdb.GetMachinesResponse.machines:type_name -> tiny_cluster.mdb.Machine
	1, // 3: tiny_cluster.mdb.RegisterOrUpdateMachineRequest.machine:type_name -> tiny_cluster.mdb.Machine
	1, // 4: tiny_cluster.mdb.DeleteMachineRequest.machine:type_name -> tiny_cluster.mdb.Machine
	2, // 5: tiny_cluster.mdb.MachineDatabase.GetMachines:input_type -> tiny_cluster.mdb.GetMachinesRequest
	4, // 6: tiny_cluster.mdb.MachineDatabase.RegisterOrUpdateMachine:input_type -> tiny_cluster.mdb.RegisterOrUpdateMachineRequest
	6, // 7: tiny_cluster.mdb.MachineDatabase.DeleteMachine:input_type -> tiny_cluster.mdb.DeleteMachineRequest
	3, // 8: tiny_cluster.mdb.MachineDatabase.GetMachines:output_type -> tiny_cluster.mdb.GetMachinesResponse
	5, // 9: tiny_cluster.mdb.MachineDatabase.RegisterOrUpdateMachine:output_type -> tiny_cluster.mdb.RegisterOrUpdateMachineResponse
	7, // 10: tiny_cluster.mdb.MachineDatabase.DeleteMachine:output_type -> tiny_cluster.mdb.DeleteMachineResponse
	8, // [8:11] is the sub-list for method output_type
	5, // [5:8] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_mdb_proto_init() }
func file_mdb_proto_init() {
	if File_mdb_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mdb_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MachineSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdb_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Machine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdb_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdb_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachinesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdb_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterOrUpdateMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdb_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterOrUpdateMachineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdb_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMachineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdb_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMachineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mdb_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMachinesRequest_QueryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mdb_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mdb_proto_goTypes,
		DependencyIndexes: file_mdb_proto_depIdxs,
		MessageInfos:      file_mdb_proto_msgTypes,
	}.Build()
	File_mdb_proto = out.File
	file_mdb_proto_rawDesc = nil
	file_mdb_proto_goTypes = nil
	file_mdb_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MachineDatabaseClient is the client API for MachineDatabase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MachineDatabaseClient interface {
	GetMachines(ctx context.Context, in *GetMachinesRequest, opts ...grpc.CallOption) (*GetMachinesResponse, error)
	RegisterOrUpdateMachine(ctx context.Context, in *RegisterOrUpdateMachineRequest, opts ...grpc.CallOption) (*RegisterOrUpdateMachineResponse, error)
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error)
}

type machineDatabaseClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineDatabaseClient(cc grpc.ClientConnInterface) MachineDatabaseClient {
	return &machineDatabaseClient{cc}
}

func (c *machineDatabaseClient) GetMachines(ctx context.Context, in *GetMachinesRequest, opts ...grpc.CallOption) (*GetMachinesResponse, error) {
	out := new(GetMachinesResponse)
	err := c.cc.Invoke(ctx, "/tiny_cluster.mdb.MachineDatabase/GetMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineDatabaseClient) RegisterOrUpdateMachine(ctx context.Context, in *RegisterOrUpdateMachineRequest, opts ...grpc.CallOption) (*RegisterOrUpdateMachineResponse, error) {
	out := new(RegisterOrUpdateMachineResponse)
	err := c.cc.Invoke(ctx, "/tiny_cluster.mdb.MachineDatabase/RegisterOrUpdateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineDatabaseClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error) {
	out := new(DeleteMachineResponse)
	err := c.cc.Invoke(ctx, "/tiny_cluster.mdb.MachineDatabase/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineDatabaseServer is the server API for MachineDatabase service.
type MachineDatabaseServer interface {
	GetMachines(context.Context, *GetMachinesRequest) (*GetMachinesResponse, error)
	RegisterOrUpdateMachine(context.Context, *RegisterOrUpdateMachineRequest) (*RegisterOrUpdateMachineResponse, error)
	DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error)
}

// UnimplementedMachineDatabaseServer can be embedded to have forward compatible implementations.
type UnimplementedMachineDatabaseServer struct {
}

func (*UnimplementedMachineDatabaseServer) GetMachines(context.Context, *GetMachinesRequest) (*GetMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachines not implemented")
}
func (*UnimplementedMachineDatabaseServer) RegisterOrUpdateMachine(context.Context, *RegisterOrUpdateMachineRequest) (*RegisterOrUpdateMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOrUpdateMachine not implemented")
}
func (*UnimplementedMachineDatabaseServer) DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}

func RegisterMachineDatabaseServer(s *grpc.Server, srv MachineDatabaseServer) {
	s.RegisterService(&_MachineDatabase_serviceDesc, srv)
}

func _MachineDatabase_GetMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDatabaseServer).GetMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiny_cluster.mdb.MachineDatabase/GetMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDatabaseServer).GetMachines(ctx, req.(*GetMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineDatabase_RegisterOrUpdateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterOrUpdateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDatabaseServer).RegisterOrUpdateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiny_cluster.mdb.MachineDatabase/RegisterOrUpdateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDatabaseServer).RegisterOrUpdateMachine(ctx, req.(*RegisterOrUpdateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MachineDatabase_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineDatabaseServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tiny_cluster.mdb.MachineDatabase/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineDatabaseServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MachineDatabase_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tiny_cluster.mdb.MachineDatabase",
	HandlerType: (*MachineDatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMachines",
			Handler:    _MachineDatabase_GetMachines_Handler,
		},
		{
			MethodName: "RegisterOrUpdateMachine",
			Handler:    _MachineDatabase_RegisterOrUpdateMachine_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _MachineDatabase_DeleteMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mdb.proto",
}
