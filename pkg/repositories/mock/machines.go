// Code generated by MockGen. DO NOT EDIT.
// Source: machines.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	models "github.com/pddg/tiny-cluster/pkg/models"
	reflect "reflect"
)

// MockMachineRepository is a mock of MachineRepository interface
type MockMachineRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMachineRepositoryMockRecorder
}

// MockMachineRepositoryMockRecorder is the mock recorder for MockMachineRepository
type MockMachineRepositoryMockRecorder struct {
	mock *MockMachineRepository
}

// NewMockMachineRepository creates a new mock instance
func NewMockMachineRepository(ctrl *gomock.Controller) *MockMachineRepository {
	mock := &MockMachineRepository{ctrl: ctrl}
	mock.recorder = &MockMachineRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMachineRepository) EXPECT() *MockMachineRepositoryMockRecorder {
	return m.recorder
}

// GetMachines mocks base method
func (m *MockMachineRepository) GetMachines(ctx context.Context) ([]*models.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachines", ctx)
	ret0, _ := ret[0].([]*models.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachines indicates an expected call of GetMachines
func (mr *MockMachineRepositoryMockRecorder) GetMachines(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachines", reflect.TypeOf((*MockMachineRepository)(nil).GetMachines), ctx)
}

// RegisterMachine mocks base method
func (m *MockMachineRepository) RegisterMachine(ctx context.Context, machine *models.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterMachine", ctx, machine)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterMachine indicates an expected call of RegisterMachine
func (mr *MockMachineRepositoryMockRecorder) RegisterMachine(ctx, machine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterMachine", reflect.TypeOf((*MockMachineRepository)(nil).RegisterMachine), ctx, machine)
}

// UpdateMachine mocks base method
func (m *MockMachineRepository) UpdateMachine(ctx context.Context, machine *models.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMachine", ctx, machine)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMachine indicates an expected call of UpdateMachine
func (mr *MockMachineRepositoryMockRecorder) UpdateMachine(ctx, machine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachine", reflect.TypeOf((*MockMachineRepository)(nil).UpdateMachine), ctx, machine)
}

// DeleteMachine mocks base method
func (m *MockMachineRepository) DeleteMachine(ctx context.Context, machine *models.Machine) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMachine", ctx, machine)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMachine indicates an expected call of DeleteMachine
func (mr *MockMachineRepositoryMockRecorder) DeleteMachine(ctx, machine interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMachine", reflect.TypeOf((*MockMachineRepository)(nil).DeleteMachine), ctx, machine)
}
